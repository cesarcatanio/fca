/**
 */
package fca.impl;

import fca.Ajuste;
import fca.FcaPackage;
import fca.ReglaUno;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc --> An implementation of the model object '
 * <em><b>Regla Uno</b></em>'. <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 * <li>{@link fca.impl.ReglaUnoImpl#getAjuste <em>Ajuste</em>}</li>
 * </ul>
 * </p>
 * 
 * @generated
 */
public class ReglaUnoImpl extends MinimalEObjectImpl.Container implements
		ReglaUno {

	/**
	 * obtengo los atributos modificadas hasta el momento
	 */
	private ArrayList<Integer> atributosEditados = new ArrayList<Integer>();

	/**
	 * Lista de las columnas editadas
	 */
	private EList<Integer> listaColumnasEditadas;
	/**
	 * The cached value of the '{@link #getAjuste() <em>Ajuste</em>}' reference.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @see #getAjuste()
	 * @generated
	 * @ordered
	 */
	protected Ajuste ajuste;

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ReglaUnoImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FcaPackage.Literals.REGLA_UNO;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Ajuste getAjuste() {
		if (ajuste != null && ajuste.eIsProxy()) {
			InternalEObject oldAjuste = (InternalEObject) ajuste;
			ajuste = (Ajuste) eResolveProxy(oldAjuste);
			if (ajuste != oldAjuste) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE,
							FcaPackage.REGLA_UNO__AJUSTE, oldAjuste, ajuste));
			}
		}
		return ajuste;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Ajuste basicGetAjuste() {
		return ajuste;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setAjuste(Ajuste newAjuste) {
		Ajuste oldAjuste = ajuste;
		ajuste = newAjuste;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET,
					FcaPackage.REGLA_UNO__AJUSTE, oldAjuste, ajuste));
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public String[][] analizarUno(String[][] matriz) {
		Ajuste ajusteImpl = FcaFactoryImpl.eINSTANCE.createAjuste();
		
//		matriz = ajusteImpl.ajustarMatriz(matriz);
		
		String[] fila;
		for (int i = 1; i < matriz.length; i++) {
			fila = ajusteImpl.obtenerFila(matriz, i);
			ArrayList<Integer> columnasTocadas = new ArrayList<>();
			if (ajusteImpl.contarAtributosFila(fila) == 1) {
				int columna = ajusteImpl.obtenerColumnasDeLaFila(fila)[0];
				if (buscarNumeroEnArrayLis(columna, columnasTocadas) == -1) {
					System.out.println(columna+"/"+buscarNumeroEnArrayLis(columna, columnasTocadas));
					matriz[0][columna] = ajusteImpl.combinarObjetoAtributo(i, columna, matriz);
					columnasTocadas.add(columna);	
					matriz = ajusteImpl.eliminarFila(matriz, i);									
					i--;
				}				
//				matriz[0][columna] = ajusteImpl.combinarObjetoAtributo(i, columna, matriz);
//				matriz = ajusteImpl.eliminarFila(matriz, i);
//				i--;
			}
		}
//		imprimirMatriz(matriz);
		return matriz;
	}
	
	
	@Override
	public String[][] analizarUnoB(String[][] matriz) {
		Ajuste ajusteImpl = FcaFactoryImpl.eINSTANCE.createAjuste();
		
		matriz = ajusteImpl.ajustarMatriz(matriz);
		
		ArrayList<Integer> filasTocadas = new ArrayList<>();
		
		String[] columna;
		for (int i = 1; i < matriz[0].length; i++) {
			columna = ajusteImpl.obtenerColumna(matriz, i);
			if (ajusteImpl.contarObjetosColumna(columna) == 1) {
				int fila = ajusteImpl.obtenerFilasDeLaColumna(columna)[0];
				if (buscarNumeroEnArrayLis(fila, filasTocadas) == -1) {
					matriz[fila][0] = ajusteImpl.combinarAtributoObjeto(fila, i, matriz);
//					System.out.println(matriz[fila][0]);
					matriz = ajusteImpl.eliminarColumna(matriz, i);
					filasTocadas.add(fila);
//					System.out.println("eliminaColumna"+i);
					i--;
				}
//				matriz[fila][0] = ajusteImpl.combinarAtributoObjeto(fila, i, matriz);
//				System.out.println(matriz[fila][0]);
//				matriz = ajusteImpl.eliminarColumna(matriz, i);
//				filasTocadas.add(fila);
//				System.out.println("eliminaColumna"+i);
//				i--;
			}
		}
		return matriz;
	}
	


	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public String[][] analizarDos(String[][] matriz) {
		Ajuste ajusteImpl = FcaFactoryImpl.eINSTANCE.createAjuste();
		String[] fila;
		int[] columnas;
		int atributo = -1;
		for (int i = 1; i < matriz.length; i++) {
			for (int j = 1; j < matriz[0].length; j++) {
				if (buscarSuperFila(matriz, i) != -1) {
					fila = ajusteImpl.obtenerFila(matriz, i);
					columnas = ajusteImpl.obtenerColumnasDeLaFila(fila);
					atributo = compararArregloVsArrayList(columnas, atributosEditados);
					
					if (atributo != -1) {
						matriz[0][atributo] = ajusteImpl.combinarObjetoAtributo(i, atributo, matriz);
						matriz = ajusteImpl.eliminarFila(matriz, i);
					}

				}
			}
		}
		return matriz;
	}
	
	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public String[][] analizarDosB(String[][] matriz) {
		return analizarUno(analizarUnoB(matriz));
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public int buscarSuperFila(String[][] matriz, int fila) {
		Ajuste ajusteImpl = FcaFactoryImpl.eINSTANCE.createAjuste();
		
		String[] filaVector1 = ajusteImpl.obtenerFila(matriz, fila);
		if (ajusteImpl.contarAtributosFila(filaVector1) < 2) {
			return -1;
		}
		
		String[] filaVector2;
		int encontrados = 0;
		for (int i = 1; i < matriz.length; i++) {
			filaVector2 = ajusteImpl.obtenerFila(matriz, i);
			if (i != fila) {
				int[] fv1 = ajusteImpl.obtenerColumnasDeLaFila(filaVector1);
				int[] fv2 = ajusteImpl.obtenerColumnasDeLaFila(filaVector2);
				if (fv1.length <= fv2.length) {
					for (int j = 0; j < fv1.length; j++) {
						int numero = buscarNumeroEnArreglo(fv1[j], fv2);
						if (numero != -1) {
							encontrados++;
						}
					}
				}	
				if (encontrados == fv1.length) {
					return i;
				}
			}
		}
		return -1;
	}
	
	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public int bucarNumeroEnArreglo(int numero, int[] arreglo){
		for (int i = 0; i < arreglo.length; i++) {
			if (numero == arreglo[i]) {
				return numero;
			}
		}
		return -1;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FcaPackage.REGLA_UNO__AJUSTE:
			if (resolve)
				return getAjuste();
			return basicGetAjuste();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FcaPackage.REGLA_UNO__AJUSTE:
			setAjuste((Ajuste) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FcaPackage.REGLA_UNO__AJUSTE:
			setAjuste((Ajuste) null);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FcaPackage.REGLA_UNO__AJUSTE:
			return ajuste != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case FcaPackage.REGLA_UNO___ANALIZAR_UNO:
			analizarUno(null);
			return null;
		case FcaPackage.REGLA_UNO___ANALIZAR_DOS:
			analizarDos(null);
			return null;
		case FcaPackage.REGLA_UNO___BUSCAR_SUPER_FILA:
			buscarSuperFila(null, operationID);
			return null;
		}
		return super.eInvoke(operationID, arguments);
	}

	@Override
	public EList<Integer> getListaColumnasEditadas() {
		// TODO Auto-generated method stub
		return listaColumnasEditadas;
	}

	@Override
	public int compararArregloVsArrayList(int[] columnas, ArrayList<Integer> a) {

		for (int i = 0; i < columnas.length; i++) {
			if (buscarNumeroEnArrayLis(columnas[i], a) == -1) {
				return columnas[i];
			}
		}
		return -1;
	}

	int buscarNumeroEnArrayLis(int n, ArrayList<Integer> a) {
		System.out.println("busqueda");
		for (int i = 0; i < a.size(); i++) {
			
			if (n == a.get(i)) {
				System.out.println(n);
				return a.get(i);
				
			}
		}
		System.out.println("/busqueda");
		return -1;
		

	}
	int buscarNumeroEnArreglo(int n, int[] a) {
		for (int i = 0; i < a.length; i++) {
			if (n == a[i]) {
				return i;
			}
		}
		return -1;

	}
	


} // ReglaUnoImpl
