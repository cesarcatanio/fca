package interfaz;

import java.awt.MenuBar;
import java.awt.Rectangle;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.ToolTipManager;
import javax.swing.plaf.ToolTipUI;
import javax.xml.bind.ParseConversionEvent;

import logica.Logica;

import org.eclipse.jface.action.IContributionManager;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.ViewPart;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.swt.widgets.ToolTip;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.MouseTrackAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.widgets.Combo;

public class FCAViewPart extends ViewPart {

	public static final String ID = "interfaz.FCAViewPart"; //$NON-NLS-1$
	
	Composite parent;
	Composite container;
	int aw = 0;
	int ah = 0;

	Composite compositeNuevaMatriz;
	Composite compositeCrearMatriz;
	Composite compositeMatriz;
	String[][] matriz;
	Text[][] matrizText;
	Text text_F;
	Text text_C;

	Composite compositeComparar;
	Composite compositeMatrizA;
	Composite compositeMatrizB;
	Text[][] matrizTextA;
	String[][] matrizA;
	Text[][] matrizTextB;
	String[][] matrizB;
	
	ToolBar toolBar;

	Composite compositeCaracteristicas;
	
	public FCAViewPart() {

	}

	/**
	 * Create contents of the view part.
	 * 
	 * @param parent
	 */
	@Override
	public void createPartControl(Composite parent) {
		this.parent = parent;
		container = new Composite(parent, SWT.NONE);
		container.setLayout(null);

		toolBar = new ToolBar(container, SWT.FLAT | SWT.RIGHT);
		toolBar.setBounds(0, 0, 594, 32);

		ToolItem tltmNuevaMatriz = new ToolItem(toolBar, SWT.NONE);
		tltmNuevaMatriz.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				compositeNuevaMatriz.setVisible(true);
				compositeCrearMatriz.setVisible(true);

				compositeMatriz.setVisible(false);
				compositeComparar.setVisible(false);
				
				aw = 500;
				ah = 300;
				redimensionarComposite(compositeCrearMatriz, aw, ah);
			}
		});
		tltmNuevaMatriz.setText("Nueva Matriz");

		ToolItem tltmComparar = new ToolItem(toolBar, SWT.NONE);
		tltmComparar.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				compositeNuevaMatriz.setVisible(false);
				compositeComparar.setVisible(true);
				int f = 7;
				int c = 6;
				crearMatrizA(f, c);
				crearMatrizB(f, c);

			}
		});
		tltmComparar.setText("Comparar");

		ToolItem tltmGrafo = new ToolItem(toolBar, SWT.NONE);
		tltmGrafo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				capturarDatosMatrizText();
			}
		});
		tltmGrafo.setText("Grafo");

		ToolItem tltmCaracteristicas = new ToolItem(toolBar, SWT.NONE);
		tltmCaracteristicas.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				negarComposites();
				compositeCaracteristicas.setVisible(true);
				
			}
		});
		tltmCaracteristicas.setText("Caracteristicas");

		ToolItem tltmImportar = new ToolItem(toolBar, SWT.BORDER);
		tltmImportar.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				
				negarComposites();
				
				compositeNuevaMatriz.setVisible(true);
				compositeCrearMatriz.setVisible(false);

				String ruta = "";
				Logica logica = new Logica();
				JFileChooser chooser = new JFileChooser();

				if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

					ruta = chooser.getSelectedFile().getAbsolutePath();
					String matrizOut[][] = logica.importarMatriz(ruta);
					
					crearMatriz(matrizOut.length, matrizOut[0].length);

					for (int k = 0; k < matrizOut.length; k++) {
						for (int l = 0; l < matrizOut[0].length; l++) {
							matrizText[k][l].setText(matrizOut[k][l]);
						}
					}
				} else {
					JOptionPane.showMessageDialog(null,
							"Debe seleccionar un archivo");
				}
			}
		});
		tltmImportar.setText("Importar");

		ToolItem tltmExportar = new ToolItem(toolBar, SWT.NONE);
		tltmExportar.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				
				Logica logica= new Logica();
				String ruta="";
				JFileChooser chooser = new JFileChooser();
				if(chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION){
					 ruta=chooser.getSelectedFile().getAbsolutePath();
					 
					 logica.exportarMatriz(capturarDatosMatrizText(),ruta);
				}
				else{
					JOptionPane.showMessageDialog(null, "Debe especificar una ruta");
				}
			}
		});
		tltmExportar.setText("Exportar");
		
		compositeNuevaMatriz = new Composite(container, SWT.NONE);
		compositeNuevaMatriz.setBounds(0, 32, 594, 428);
		compositeNuevaMatriz.setLayout(null);

		compositeCrearMatriz = new Composite(compositeNuevaMatriz, SWT.NONE);
		compositeCrearMatriz.setBounds(0, 0, 594, 230);
		compositeCrearMatriz.setLayout(null);

		Button btnCrearMatriz = new Button(compositeCrearMatriz, SWT.NONE);
		btnCrearMatriz.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				negarComposites();
				int f = Integer.parseInt(text_F.getText());
				int c = Integer.parseInt(text_C.getText());

				compositeNuevaMatriz.setVisible(true);
				renovarCompositeMatriz();
				compositeMatriz.setVisible(true);
				compositeCrearMatriz.setVisible(false);

				crearMatriz(f, c);
			}
		});
		btnCrearMatriz.setBounds(10, 74, 145, 30);
		btnCrearMatriz.setText("Crear Matriz");

		text_F = new Text(compositeCrearMatriz, SWT.BORDER);
		text_F.setBounds(105, 10, 50, 27);

		text_C = new Text(compositeCrearMatriz, SWT.BORDER);
		text_C.setBounds(105, 40, 50, 27);

		Label lblNewLabel = new Label(compositeCrearMatriz, SWT.NONE);
		lblNewLabel.setBounds(10, 10, 75, 17);
		lblNewLabel.setText("Filas");

		Label lblNewLabel_1 = new Label(compositeCrearMatriz, SWT.NONE);
		lblNewLabel_1.setBounds(10, 40, 75, 17);
		lblNewLabel_1.setText("Columnas");

		compositeMatriz = new Composite(compositeNuevaMatriz, SWT.NONE);
		compositeMatriz.setBounds(0, 0, 594, 428);
		compositeMatriz.setLayout(null);

		compositeComparar = new Composite(container, SWT.NONE);
		compositeComparar.setLocation(0, 32);
		compositeComparar.setSize(1005, 468);

		compositeMatrizA = new Composite(compositeComparar, SWT.NONE);
		compositeMatrizA.setSize(500, 228);
		compositeMatrizA.setLayout(null);

		compositeMatrizB = new Composite(compositeComparar, SWT.NONE);
		compositeMatrizB.setLocation(505, 0);
		compositeMatrizB.setSize(500, 228);
		compositeMatrizB.setLayout(null);

		Button btnComparar = new Button(compositeComparar, SWT.NONE);
		btnComparar.setBounds(450, 238, 105, 30);
		btnComparar.setText("Comparar");

		compositeCaracteristicas = new Composite(container, SWT.NONE);
		compositeCaracteristicas.setBounds(0, 32, 595, 113);

		Label lblUsuario = new Label(compositeCaracteristicas, SWT.NONE);
		lblUsuario.setLocation(10, 10);
		lblUsuario.setSize(70, 17);
		lblUsuario.setText("Usuario");

		Label lblSintaxis = new Label(compositeCaracteristicas, SWT.NONE);
		lblSintaxis.setLocation(230, 10);
		lblSintaxis.setSize(70, 17);
		lblSintaxis.setText("Sintaxis");

		final Combo comboUsuario = new Combo(compositeCaracteristicas, SWT.NONE);
		comboUsuario.setLocation(10, 40);
		comboUsuario.setSize(200, 30);
		comboUsuario.add("Usuario del lenguaje");
		comboUsuario.add("experto del lenguaje");

		final Combo comboSintaxis = new Combo(compositeCaracteristicas, SWT.NONE);
		comboSintaxis.setBounds(230, 40, 200, 30);
		comboSintaxis.add("Sintaxis Concreta");
		comboSintaxis.add("Sintaxis Abstracta");
		comboSintaxis.add("Herramienta");

		Button btnAceptar = new Button(compositeCaracteristicas, SWT.NONE);
		btnAceptar.setBounds(175, 80, 91, 29);
		btnAceptar.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				negarComposites();
				
				int itemCountUsuario = comboUsuario.getSelectionIndex();
				int itemCountSintasix = comboSintaxis.getSelectionIndex();
				Logica logica = new Logica();
				String ruta = "";
				
				//Usuario
				if (itemCountUsuario == 0 && itemCountSintasix == 0) {
					
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/00.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					llenarMatrizText();
					
				}
				if (itemCountUsuario == 0 && itemCountSintasix == 1) {
					
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/01.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					llenarMatrizText();
				}
				if (itemCountUsuario == 0 && itemCountSintasix == 2) {
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/02.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					llenarMatrizText();
				}
				
				//Experto
				if (itemCountUsuario == 1 && itemCountSintasix == 0) {
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/10.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					llenarMatrizText();
				}
				if (itemCountUsuario == 1 && itemCountSintasix == 1) {
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/11.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					llenarMatrizText();
				}
				if (itemCountUsuario == 1 && itemCountSintasix == 2) {
					ruta = "/home/u/Documentos/proyecto/proyecto/workspace/vista.view/src/matrices/12.txt";
					String matrizOut[][]  = logica.importarMatriz(ruta);
					crearMatriz(matrizOut.length, matrizOut[0].length);
					matriz = matrizOut;
					
					llenarMatrizText();
				}
				compositeCrearMatriz.setVisible(true);
				compositeMatriz.setVisible(true);
			}
		});
		btnAceptar.setText("Aceptar");

		createActions();
		initializeToolBar();
		initializeMenu();
		negarComposites();
	}
	public void redimensionarComposite(Composite composite,int w,int h){
		composite.setBounds(composite.getBounds().x, composite.getBounds().y, w, h);
		if (composite.getParent() != null && !composite.equals(parent.getParent())) {
			composite = composite.getParent();
			redimensionarComposite(composite,w,h);
		}
		
	}

	public void negarComposites() {
		compositeNuevaMatriz.setVisible(false);
		compositeCrearMatriz.setVisible(false);
		compositeMatriz.setVisible(false);
		
		compositeComparar.setVisible(false);
		compositeMatrizA.setVisible(false);
		compositeMatrizB.setVisible(false);
		
		compositeCaracteristicas.setVisible(false);
	}
	public void renovarCompositeMatriz() {
		if (compositeMatriz!= null) {
			Composite composite_aux = new Composite(compositeMatriz.getParent(),
					compositeMatriz.getStyle());
			composite_aux.setBounds(compositeMatriz.getBounds());
			composite_aux.setLayout(compositeMatriz.getLayout());
			compositeMatriz = composite_aux;
		}
		
	}

	public void crearMatriz(int f, int c) {

		matrizText = new Text[f][c];
		int x = 0;
		int y = 0;
		int w = 70;
		int h = 30;
		
		

		for (int i = 0; i < f; i++) {
			for (int j = 0; j < c; j++) {

				Text text = new Text(compositeMatriz, SWT.BORDER);
				text.setBounds(x, y, w, h);
				x = x + w;

				matrizText[i][j] = text;
				aw += x;
			}
			x = 0;
			y = y + h;
			ah+=y;
		}
		redimensionarComposite(compositeMatriz, aw, ah);
	}
	public void llenarMatrizText(){
		for (int i = 0; i < matrizText.length; i++) {
			for (int j = 0; j < matrizText[0].length; j++) {
				matrizText[i][j].setText(matriz[i][j]);
			}
		}
	}

	public String[][] capturarDatosMatrizText() {

		String[][] matriz = new String[matrizText.length][matrizText[0].length];

		for (int i = 0; i < matrizText.length; i++) {
			for (int j = 0; j < matrizText[0].length; j++) {
				matriz[i][j] = matrizText[i][j].getText();
			}
		}
		return matriz;

	}



	public void crearMatrizA(int f, int c) {
		matrizTextA = new Text[f][c];
		int x = 0;
		int y = 0;
		int w = 70;
		int h = 30;
		aw = 0;
		ah = 0;

		for (int i = 0; i < f; i++) {
			for (int j = 0; j < c; j++) {

				Text text = new Text(compositeMatrizA, SWT.BORDER);
				text.setBounds(x, y, w, h);
				x = x + w;

				matrizTextA[i][j] = text;
			}
			x = 0;
			y = y + h;
		}
		matrizTextA[0][0].setText("Matriz A");
	}

	public void capturarDatosMatrizTextA() {

		matrizA = new String[matrizTextA.length][matrizTextA[0].length];

		for (int i = 0; i < matrizTextA.length; i++) {
			for (int j = 0; j < matrizTextA[0].length; j++) {
				matrizA[i][j] = matrizTextA[i][j].getText();
			}
		}

	}

	public void crearMatrizB(int f, int c) {
		matrizTextB = new Text[f][c];
		int x = 0;
		int y = 0;
		int w = 70;
		int h = 30;

		for (int i = 0; i < f; i++) {
			for (int j = 0; j < c; j++) {

				Text text = new Text(compositeMatrizB, SWT.BORDER);
				text.setBounds(x, y, w, h);
				x = x + w;

				matrizTextB[i][j] = text;
			}
			x = 0;
			y = y + h;
		}
		matrizTextB[0][0].setText("Matriz B");
	}

	public void capturarDatosMatrizTextB() {

		matrizA = new String[matrizTextB.length][matrizTextB[0].length];

		for (int i = 0; i < matrizTextB.length; i++) {
			for (int j = 0; j < matrizTextB[0].length; j++) {
				matrizA[i][j] = matrizTextB[i][j].getText();
			}
		}

	}

	/**
	 * Create the actions.
	 */
	private void createActions() {
		// Create the actions

	}

	/**
	 * Initialize the toolbar.
	 */
	private void initializeToolBar() {
		IToolBarManager toolbarManager = getViewSite().getActionBars()
				.getToolBarManager();
	}

	/**
	 * Initialize the menu.
	 */
	private void initializeMenu() {
		IMenuManager menuManager = getViewSite().getActionBars()
				.getMenuManager();
	}

	@Override
	public void setFocus() {
		// Set the focus
	}
}
